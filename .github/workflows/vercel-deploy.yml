name: Vercel Deployment

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm install

      - name: Copy .env
        run: cp .env.example .env

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          ENV_TYPE="preview"
          if [ "${{ github.event_name }}" == "push" ]; then
            ENV_TYPE="production"
          fi
          vercel pull --yes \
            --environment=$ENV_TYPE \
            --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel build \
            ${{ github.event_name == 'push' && '--prod' || '' }} \
            --token=${{ secrets.VERCEL_TOKEN }}

      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const isPush = '${{ github.event_name }}' === 'push';
            const environment = isPush ? 'production' : 'preview';
            const ref = context.ref;

            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              environment: environment,
              required_contexts: [],
              auto_merge: false,
              description: 'Deploy to Vercel',
            });

            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;

      - name: Set Deployment Status to In Progress
        if: steps.create_deployment.outputs.deployment_id
        uses: actions/github-script@v7
        with:
          script: |
            const depId =
              '${{ steps.create_deployment.outputs.deployment_id }}';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: depId,
              state: 'in_progress',
              description: 'Deploying to Vercel...',
            });

      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod \
              --token=${{ secrets.VERCEL_TOKEN }})
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt \
              --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployment URL: $DEPLOYMENT_URL"

      - name: Set Deployment Status to Success
        if: success() && steps.create_deployment.outputs.deployment_id
        uses: actions/github-script@v7
        with:
          script: |
            const depId =
              '${{ steps.create_deployment.outputs.deployment_id }}';
            const depUrl = '${{ steps.deploy.outputs.url }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}';
            const logUrl = `${runUrl}/actions/runs/${{ github.run_id }}`;
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: depId,
              state: 'success',
              description: 'Deployment successful',
              environment_url: depUrl,
              log_url: logUrl,
            });

      - name: Set Deployment Status to Failure
        if: failure() && steps.create_deployment.outputs.deployment_id
        uses: actions/github-script@v7
        with:
          script: |
            const depId =
              '${{ steps.create_deployment.outputs.deployment_id }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}';
            const logUrl = `${runUrl}/actions/runs/${{ github.run_id }}`;
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: depId,
              state: 'failure',
              description: 'Deployment failed',
              log_url: logUrl,
            });
